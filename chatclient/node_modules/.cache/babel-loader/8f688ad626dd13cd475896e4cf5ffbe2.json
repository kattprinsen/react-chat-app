{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simon Bergqvist\\\\Utveckling\\\\chat-app\\\\chatclient\\\\src\\\\components\\\\ChatRoom\\\\ChatRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport './ChatRoom.css';\nimport useChat from '../../utils/useChat';\nimport useTyping from '../../utils/useTyping';\nimport ChatMessage from '../ChatMessage/ChatMessage';\nimport NewMessageForm from '../NewMessageForm/NewMessageForm';\nimport TypingMessage from '../TypingMessage/TypingMessage';\nimport Users from '../Users/Users';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatRoom = props => {\n  _s();\n\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState('');\n  const {\n    isTyping,\n    startTyping,\n    stopTyping,\n    cancelTyping\n  } = useTyping();\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = event => {\n    event.preventDefault();\n    cancelTyping();\n    sendMessage(newMessage);\n    setNewMessage('');\n  };\n\n  const messagesEndref = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndref.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  useEffect(scrollToBottom, [newMessage]);\n  useEffect(() => {\n    if (isTyping) {\n      startTypingMessage();\n    } else {\n      stopTypingMessage();\n    }\n  }, [isTyping]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-room-top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"room-name\",\n        children: [\"Room: \", roomId, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), user && /*#__PURE__*/_jsxDEV(UserAvatar, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Users, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"messages-list\",\n        children: [messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(ChatMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)), typingUsers.map((user, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(TypingMessage, {\n            user: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, messages.length + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NewMessageForm, {\n      newMessage: newMessage,\n      handleNewMessageChange: handleNewMessageChange,\n      handleStartTyping: startTyping,\n      handleStopTyping: stopTyping,\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"eaPvK+cekRwFpFQdRsSJad7v8jk=\", false, function () {\n  return [useChat, useTyping];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/Simon Bergqvist/Utveckling/chat-app/chatclient/src/components/ChatRoom/ChatRoom.jsx"],"names":["React","useEffect","useState","useRef","useChat","useTyping","ChatMessage","NewMessageForm","TypingMessage","Users","UserAvatar","ChatRoom","props","roomId","match","params","messages","user","users","typingUsers","sendMessage","startTypingMessage","stopTypingMessage","newMessage","setNewMessage","isTyping","startTyping","stopTyping","cancelTyping","handleNewMessageChange","event","target","value","handleSendMessage","preventDefault","messagesEndref","scrollToBottom","current","scrollIntoView","behavior","map","message","i","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\nimport './ChatRoom.css';\r\nimport useChat from '../../utils/useChat';\r\nimport useTyping from '../../utils/useTyping';\r\nimport ChatMessage from '../ChatMessage/ChatMessage';\r\nimport NewMessageForm from '../NewMessageForm/NewMessageForm';\r\nimport TypingMessage from '../TypingMessage/TypingMessage';\r\nimport Users from '../Users/Users';\r\nimport UserAvatar from '../UserAvatar/UserAvatar';\r\n\r\nconst ChatRoom = (props) => {\r\n\r\n  const { roomId } = props.match.params;\r\n  const {\r\n    messages,\r\n    user,\r\n    users,\r\n    typingUsers,\r\n    sendMessage,\r\n    startTypingMessage,\r\n    stopTypingMessage\r\n  } = useChat(roomId);\r\n\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  const {\r\n    isTyping,\r\n    startTyping,\r\n    stopTyping,\r\n    cancelTyping\r\n  } = useTyping();\r\n\r\n  const handleNewMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = (event) => {\r\n    event.preventDefault();\r\n    cancelTyping();\r\n    sendMessage(newMessage);\r\n    setNewMessage('');\r\n  };\r\n\r\n  const messagesEndref = useRef(null);\r\n  const scrollToBottom = () => {\r\n    messagesEndref.current.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  useEffect( scrollToBottom, [newMessage]);\r\n\r\n  useEffect(() => {\r\n    if(isTyping) {\r\n      startTypingMessage();\r\n    } else {\r\n      stopTypingMessage();\r\n    }\r\n  }, [isTyping]);\r\n\r\n  return (\r\n    <div className='chat-room-container'>\r\n      <div className='chat-room-top-bar'>\r\n        <h1 className='room-name'>Room: {roomId} </h1>\r\n        {user && <UserAvatar user={user}></UserAvatar>}\r\n    </div>\r\n    <Users users={users}></Users>\r\n    <div className='messages-container'>\r\n      <ol className='messages-list'>\r\n        {messages.map((message, i) => (\r\n          <li key={i}>\r\n            <ChatMessage message={message}></ChatMessage>\r\n          </li>\r\n        ))}\r\n        {typingUsers.map((user, i) => (\r\n          <li key={messages.length + i}>\r\n            <TypingMessage user={user}></TypingMessage>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n      <div ref={messagesEndref} />\r\n      </div>\r\n      <NewMessageForm\r\n        newMessage={newMessage}\r\n        handleNewMessageChange={handleNewMessageChange}\r\n        handleStartTyping={startTyping}\r\n        handleStopTyping={stopTyping}\r\n        handleSendMessage={handleSendMessage}>\r\n      </NewMessageForm>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}