{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './ChatRoom.css';\nimport useChat from '../../utils/useChat';\nimport useTyping from '../../utils/useTyping';\nimport ChatMessage from '../ChatMessage/ChatMessage';\nimport NewMessageForm from '../NewMessageForm/NewMessageForm';\nimport TypingMessage from '../TypingMessage/TypingMessage';\nimport Users from '../Users/Users';\nimport UserAvatar from '../UserAvatar/UserAvatar';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatRoom = props => {\n  _s();\n\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState('');\n  const {\n    isTyping,\n    startTyping,\n    stopTyping,\n    cancelTyping\n  } = useTyping();\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = event => {\n    event.preventDefault();\n    cancelTyping();\n    sendMessage(newMessage);\n    setNewMessage('');\n  };\n\n  useEffect(() => {\n    if (isTyping) {\n      startTypingMessage();\n    } else {\n      stopTypingMessage();\n    }\n  }, [isTyping]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ChatRoom, \"MjTdRjyuiJl4A3/sxcaJprDtoZU=\", false, function () {\n  return [useChat, useTyping];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/Simon Bergqvist/Utveckling/chat-app/chatclient/src/components/ChatRoom/ChatRoom.jsx"],"names":["React","useEffect","useState","useChat","useTyping","ChatMessage","NewMessageForm","TypingMessage","Users","UserAvatar","ChatRoom","props","roomId","match","params","messages","user","users","typingUsers","sendMessage","startTypingMessage","stopTypingMessage","newMessage","setNewMessage","isTyping","startTyping","stopTyping","cancelTyping","handleNewMessageChange","event","target","value","handleSendMessage","preventDefault"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,gBAAP;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAE1B,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAK,CAACE,KAAN,CAAYC,MAA/B;AACA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA;AAPI,MAQFlB,OAAO,CAACS,MAAD,CARX;AAUA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AACJsB,IAAAA,QADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA;AAJI,MAKFvB,SAAS,EALb;;AAOA,QAAMwB,sBAAsB,GAAIC,KAAD,IAAW;AACxCN,IAAAA,aAAa,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACI,cAAN;AACAN,IAAAA,YAAY;AACZR,IAAAA,WAAW,CAACG,UAAD,CAAX;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GALD;;AAOAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGuB,QAAH,EAAa;AACXJ,MAAAA,kBAAkB;AACnB,KAFD,MAEO;AACLC,MAAAA,iBAAiB;AAClB;AACF,GANQ,EAMN,CAACG,QAAD,CANM,CAAT;AAQA,sBACE,qCADF;AAKD,CA9CD;;GAAMd,Q;UAWAP,O,EASAC,S;;;KApBAM,Q;AAgDN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './ChatRoom.css';\r\nimport useChat from '../../utils/useChat';\r\nimport useTyping from '../../utils/useTyping';\r\nimport ChatMessage from '../ChatMessage/ChatMessage';\r\nimport NewMessageForm from '../NewMessageForm/NewMessageForm';\r\nimport TypingMessage from '../TypingMessage/TypingMessage';\r\nimport Users from '../Users/Users';\r\nimport UserAvatar from '../UserAvatar/UserAvatar';\r\n\r\nconst ChatRoom = (props) => {\r\n\r\n  const { roomId } = props.match.params;\r\n  const {\r\n    messages,\r\n    user,\r\n    users,\r\n    typingUsers,\r\n    sendMessage,\r\n    startTypingMessage,\r\n    stopTypingMessage\r\n  } = useChat(roomId);\r\n\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  const {\r\n    isTyping,\r\n    startTyping,\r\n    stopTyping,\r\n    cancelTyping\r\n  } = useTyping();\r\n\r\n  const handleNewMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = (event) => {\r\n    event.preventDefault();\r\n    cancelTyping();\r\n    sendMessage(newMessage);\r\n    setNewMessage('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(isTyping) {\r\n      startTypingMessage();\r\n    } else {\r\n      stopTypingMessage();\r\n    }\r\n  }, [isTyping]);\r\n\r\n  return (\r\n    <>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}